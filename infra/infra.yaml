AWSTemplateFormatVersion: "2010-09-09"
Description: Nested stack - The VPC template. 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Amazon EC2 Configuration'
        Parameters:
          - AmiID

    ParameterLabels:
      AmiID:
        default: 'Amazon Machine Image ID'

Parameters:
  VPCName:
    Type: String
    Description: The name of the VPC.
    Default: labs

  VPCCidr:
    Type: String
    Description: The CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16

  PublicSubnet1Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/24

  PublicSubnet2Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.1.0/24

  PrivateSubnet1Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.100.0/24

  PrivateSubnet2Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.101.0/24  
  
  # AvailabilityZones:
  #   Type: List<AWS::EC2::AvailabilityZone::Name>
  #   Description: The list of Availability Zones to use for the subnets in the VPC.

  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: Test
    AllowedValues:
      - Dev
      - Test
      - Prod
    ConstraintDescription: 'Specify either Dev, Test or Prod.'

  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'The ID of the AMI.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String

  DBUser:
    Default: oscar
    Description: The database admin account username
    Type: String    

  DBPassword:
    Default: oscarrobert
    Description: The database admin account password
    Type: String

  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t3.small

# Mappings:
#   EnvironmentToInstanceType:
#     Dev:
#       InstanceType: t2.nano
#     Test:
#       InstanceType: t2.micro
#     Prod:
#       InstanceType: t2.small 


Resources:
  VPC: #creating a VPC
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName

  FrontEndSubnet1: #creating front-end subnet
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
       - 0
       - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FrontEnd-Subnet1
        - Key: subnet-type.0.0/16
          Value: Public  

  FrontEndSubnet2: #creating front-end subnet
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
       - 1
       - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FrontEnd-Subnet2
        - Key: subnet-type
          Value: Public        

  BackEndSubnet1: #creating back-end subnet
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
       - 0
       - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: BackEnd-Subnet1
        - Key: subnet-type
          Value: Private

  BackEndSubnet2: #creating back-end subnet
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
       - 1
       - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: BackEnd-Subnet2
        - Key: subnet-type
          Value: Private          

  VPCPublicRouteTable: #creating a public route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-rt

  VPCPrivateRouteTable: #creating a private route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-rt    

  VPCIGW: #creating an Internet gateway
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPCIGW

  VPCGWAttachment: #attaching IGW to the vpc
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: VPCIGW

  PubicRoute: #associate  IGW to public rt
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCIGW
    DependsOn:
      - VPCGWAttachment

  FrontEndSubnet1RouteAssociation: #associate frontend with public rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicRouteTable
      SubnetId:
        Ref: FrontEndSubnet1

  FrontEndSubnet2RouteAssociation: #associate frontend with public rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicRouteTable
      SubnetId:
        Ref: FrontEndSubnet2

  BackEndSubnet1RouteAssociation: #associate backend with private rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateRouteTable
      SubnetId:
        Ref: BackEndSubnet1

  BackEndSubnet2RouteAssociation: #associate backend with private rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateRouteTable
      SubnetId:
        Ref: BackEndSubnet2

  NAT: #Adding NAT gateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
         Fn::GetAtt:
         - NatGatewayEIP
         - AllocationId
      SubnetId:
         Ref: FrontEndSubnet1
      Tags:
        - Key: Name
          Value: VPC-NAT-Gateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
    DependsOn: VPCGWAttachment

  PrivateRoute: #edit rout table routes to associate NAT gateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT

  SSMIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SSMIAMRole 

  FrontEndInstance:      
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref AmiID
      InstanceType: t2.micro #!FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      SecurityGroupIds:
        - !Ref FronendSg
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentType, webserver ] ]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo chkconfig docker on
          sudo yum install -y git
          sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo reboot
      AvailabilityZone: !Select 
       - 0
       - Fn::GetAZs: !Ref 'AWS::Region'
      KeyName: "devops_task"

  FrontendEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref FrontEndInstance
      
  FronendSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access via port 80'
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: !Ref VPCCidr
      
  BackEndInstance:      
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref WebServerInstanceProfile
      ImageId: !Ref AmiID
      InstanceType: t2.micro #!FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      SecurityGroupIds:
        - !Ref BackendSg
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref EnvironmentType, webserver ] ]
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          sudo chkconfig docker on
          sudo yum install -y git
          sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          sudo reboot
      AvailabilityZone: !Select 
       - 0
       - Fn::GetAZs: !Ref 'AWS::Region'
      KeyName: "devops_task"
          
  BackendEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref BackEndInstance 

  BackendSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access via port 80'
      VpcId: 
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: !Ref VPCCidr
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VPCCidr

  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: !Ref 'DBAllocatedStorage'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: postgres
      AvailabilityZone: !Select 
       - 0
       - Fn::GetAZs: !Ref 'AWS::Region'
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      DBSecurityGroups: 
      - !Ref RDSSg

  RDSSg:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access via port 80'
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
      - EC2SecurityGroupId: !Ref BackendSg

Outputs:
  VpcId:
    Value: 
      Ref: VPC
    # Export:
    #   Name: cfn-workshop-VpcId

  FrontEndSubnet1:
    Value: 
      Ref: FrontEndSubnet1
    # Export:
    #   Name: cfn-workshop-FrontEndSubnet1

  FrontEndSubnet2:
    Value: 
      Ref: FrontEndSubnet2
    # Export:
    #   Name: cfn-workshop-FrontEndSubnet2      